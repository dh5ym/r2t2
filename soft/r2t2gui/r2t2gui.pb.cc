// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: r2t2gui.proto

#include "r2t2gui.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace R2T2GuiProto {
class R2T2GuiMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<R2T2GuiMessage> _instance;
} _R2T2GuiMessage_default_instance_;
class R2T2GuiMessageAnswerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<R2T2GuiMessageAnswer> _instance;
} _R2T2GuiMessageAnswer_default_instance_;
}  // namespace R2T2GuiProto
static void InitDefaultsscc_info_R2T2GuiMessage_r2t2gui_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::R2T2GuiProto::_R2T2GuiMessage_default_instance_;
    new (ptr) ::R2T2GuiProto::R2T2GuiMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::R2T2GuiProto::R2T2GuiMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_R2T2GuiMessage_r2t2gui_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_R2T2GuiMessage_r2t2gui_2eproto}, {}};

static void InitDefaultsscc_info_R2T2GuiMessageAnswer_r2t2gui_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::R2T2GuiProto::_R2T2GuiMessageAnswer_default_instance_;
    new (ptr) ::R2T2GuiProto::R2T2GuiMessageAnswer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::R2T2GuiProto::R2T2GuiMessageAnswer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_R2T2GuiMessageAnswer_r2t2gui_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_R2T2GuiMessageAnswer_r2t2gui_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_r2t2gui_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_r2t2gui_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_r2t2gui_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_r2t2gui_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::R2T2GuiProto::R2T2GuiMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::R2T2GuiProto::R2T2GuiMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::R2T2GuiProto::R2T2GuiMessage, command_),
  PROTOBUF_FIELD_OFFSET(::R2T2GuiProto::R2T2GuiMessage, txdata_),
  PROTOBUF_FIELD_OFFSET(::R2T2GuiProto::R2T2GuiMessage, rxfreq_),
  PROTOBUF_FIELD_OFFSET(::R2T2GuiProto::R2T2GuiMessage, txfreq_),
  PROTOBUF_FIELD_OFFSET(::R2T2GuiProto::R2T2GuiMessage, fftrate_),
  PROTOBUF_FIELD_OFFSET(::R2T2GuiProto::R2T2GuiMessage, fftsize_),
  PROTOBUF_FIELD_OFFSET(::R2T2GuiProto::R2T2GuiMessage, mode_),
  PROTOBUF_FIELD_OFFSET(::R2T2GuiProto::R2T2GuiMessage, gain_),
  PROTOBUF_FIELD_OFFSET(::R2T2GuiProto::R2T2GuiMessage, antenna_),
  PROTOBUF_FIELD_OFFSET(::R2T2GuiProto::R2T2GuiMessage, agc_),
  PROTOBUF_FIELD_OFFSET(::R2T2GuiProto::R2T2GuiMessage, filterlo_),
  PROTOBUF_FIELD_OFFSET(::R2T2GuiProto::R2T2GuiMessage, filterhi_),
  PROTOBUF_FIELD_OFFSET(::R2T2GuiProto::R2T2GuiMessage, version_),
  PROTOBUF_FIELD_OFFSET(::R2T2GuiProto::R2T2GuiMessage, notch_),
  PROTOBUF_FIELD_OFFSET(::R2T2GuiProto::R2T2GuiMessage, noise_),
  3,
  0,
  2,
  5,
  4,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  1,
  13,
  14,
  PROTOBUF_FIELD_OFFSET(::R2T2GuiProto::R2T2GuiMessageAnswer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::R2T2GuiProto::R2T2GuiMessageAnswer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::R2T2GuiProto::R2T2GuiMessageAnswer, command_),
  PROTOBUF_FIELD_OFFSET(::R2T2GuiProto::R2T2GuiMessageAnswer, rxdata_),
  PROTOBUF_FIELD_OFFSET(::R2T2GuiProto::R2T2GuiMessageAnswer, fftdata_),
  PROTOBUF_FIELD_OFFSET(::R2T2GuiProto::R2T2GuiMessageAnswer, txdataack_),
  PROTOBUF_FIELD_OFFSET(::R2T2GuiProto::R2T2GuiMessageAnswer, rssi_),
  PROTOBUF_FIELD_OFFSET(::R2T2GuiProto::R2T2GuiMessageAnswer, version_),
  PROTOBUF_FIELD_OFFSET(::R2T2GuiProto::R2T2GuiMessageAnswer, fftrate_),
  PROTOBUF_FIELD_OFFSET(::R2T2GuiProto::R2T2GuiMessageAnswer, gain_),
  3,
  0,
  1,
  4,
  5,
  2,
  6,
  7,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 20, sizeof(::R2T2GuiProto::R2T2GuiMessage)},
  { 35, 48, sizeof(::R2T2GuiProto::R2T2GuiMessageAnswer)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::R2T2GuiProto::_R2T2GuiMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::R2T2GuiProto::_R2T2GuiMessageAnswer_default_instance_),
};

const char descriptor_table_protodef_r2t2gui_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rr2t2gui.proto\022\014R2T2GuiProto\"\352\004\n\016R2T2Gu"
  "iMessage\0225\n\007command\030\001 \001(\0162$.R2T2GuiProto"
  ".R2T2GuiMessage.Command\022\016\n\006txData\030\002 \001(\014\022"
  "\016\n\006rxFreq\030\003 \001(\004\022\016\n\006txFreq\030\004 \001(\004\022\017\n\007fftRa"
  "te\030\005 \001(\r\022\017\n\007fftSize\030\006 \001(\r\022/\n\004mode\030\007 \001(\0162"
  "!.R2T2GuiProto.R2T2GuiMessage.Mode\022\014\n\004ga"
  "in\030\010 \001(\005\022\017\n\007antenna\030\t \001(\r\022-\n\003agc\030\n \001(\0162 "
  ".R2T2GuiProto.R2T2GuiMessage.AGC\022\020\n\010filt"
  "erLo\030\013 \001(\005\022\020\n\010filterHi\030\014 \001(\005\022\017\n\007version\030"
  "\r \001(\t\022\r\n\005notch\030\016 \001(\005\022\r\n\005noise\030\017 \001(\005\"K\n\007C"
  "ommand\022\010\n\004NONE\020\000\022\016\n\nSTARTAUDIO\020\001\022\r\n\tSTOP"
  "AUDIO\020\002\022\n\n\006REQFFT\020\003\022\013\n\007GETINFO\020\004\"s\n\004Mode"
  "\022\007\n\003LSB\020\000\022\007\n\003USB\020\001\022\007\n\003DSB\020\002\022\007\n\003CWL\020\003\022\007\n\003"
  "CWU\020\004\022\006\n\002FM\020\005\022\006\n\002AM\020\006\022\010\n\004DIGU\020\007\022\010\n\004SPEC\020"
  "\010\022\010\n\004DIGL\020\t\022\007\n\003SAM\020\n\022\007\n\003DRM\020\013\";\n\003AGC\022\t\n\005"
  "fixed\020\000\022\010\n\004slow\020\001\022\007\n\003mid\020\002\022\010\n\004fast\020\003\022\014\n\010"
  "veryfast\020\004\"\332\001\n\024R2T2GuiMessageAnswer\022;\n\007c"
  "ommand\030\001 \001(\0162*.R2T2GuiProto.R2T2GuiMessa"
  "geAnswer.Command\022\016\n\006rxData\030\002 \001(\014\022\017\n\007fftD"
  "ata\030\003 \001(\014\022\021\n\ttxDataAck\030\004 \001(\r\022\014\n\004rssi\030\005 \001"
  "(\001\022\017\n\007version\030\006 \001(\t\022\017\n\007fftRate\030\007 \001(\r\022\014\n\004"
  "gain\030\010 \001(\005\"\023\n\007Command\022\010\n\004NONE\020\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_r2t2gui_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_r2t2gui_2eproto_sccs[2] = {
  &scc_info_R2T2GuiMessage_r2t2gui_2eproto.base,
  &scc_info_R2T2GuiMessageAnswer_r2t2gui_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_r2t2gui_2eproto_once;
static bool descriptor_table_r2t2gui_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_r2t2gui_2eproto = {
  &descriptor_table_r2t2gui_2eproto_initialized, descriptor_table_protodef_r2t2gui_2eproto, "r2t2gui.proto", 871,
  &descriptor_table_r2t2gui_2eproto_once, descriptor_table_r2t2gui_2eproto_sccs, descriptor_table_r2t2gui_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_r2t2gui_2eproto::offsets,
  file_level_metadata_r2t2gui_2eproto, 2, file_level_enum_descriptors_r2t2gui_2eproto, file_level_service_descriptors_r2t2gui_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_r2t2gui_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_r2t2gui_2eproto), true);
namespace R2T2GuiProto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* R2T2GuiMessage_Command_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_r2t2gui_2eproto);
  return file_level_enum_descriptors_r2t2gui_2eproto[0];
}
bool R2T2GuiMessage_Command_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr R2T2GuiMessage_Command R2T2GuiMessage::NONE;
constexpr R2T2GuiMessage_Command R2T2GuiMessage::STARTAUDIO;
constexpr R2T2GuiMessage_Command R2T2GuiMessage::STOPAUDIO;
constexpr R2T2GuiMessage_Command R2T2GuiMessage::REQFFT;
constexpr R2T2GuiMessage_Command R2T2GuiMessage::GETINFO;
constexpr R2T2GuiMessage_Command R2T2GuiMessage::Command_MIN;
constexpr R2T2GuiMessage_Command R2T2GuiMessage::Command_MAX;
constexpr int R2T2GuiMessage::Command_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* R2T2GuiMessage_Mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_r2t2gui_2eproto);
  return file_level_enum_descriptors_r2t2gui_2eproto[1];
}
bool R2T2GuiMessage_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr R2T2GuiMessage_Mode R2T2GuiMessage::LSB;
constexpr R2T2GuiMessage_Mode R2T2GuiMessage::USB;
constexpr R2T2GuiMessage_Mode R2T2GuiMessage::DSB;
constexpr R2T2GuiMessage_Mode R2T2GuiMessage::CWL;
constexpr R2T2GuiMessage_Mode R2T2GuiMessage::CWU;
constexpr R2T2GuiMessage_Mode R2T2GuiMessage::FM;
constexpr R2T2GuiMessage_Mode R2T2GuiMessage::AM;
constexpr R2T2GuiMessage_Mode R2T2GuiMessage::DIGU;
constexpr R2T2GuiMessage_Mode R2T2GuiMessage::SPEC;
constexpr R2T2GuiMessage_Mode R2T2GuiMessage::DIGL;
constexpr R2T2GuiMessage_Mode R2T2GuiMessage::SAM;
constexpr R2T2GuiMessage_Mode R2T2GuiMessage::DRM;
constexpr R2T2GuiMessage_Mode R2T2GuiMessage::Mode_MIN;
constexpr R2T2GuiMessage_Mode R2T2GuiMessage::Mode_MAX;
constexpr int R2T2GuiMessage::Mode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* R2T2GuiMessage_AGC_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_r2t2gui_2eproto);
  return file_level_enum_descriptors_r2t2gui_2eproto[2];
}
bool R2T2GuiMessage_AGC_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr R2T2GuiMessage_AGC R2T2GuiMessage::fixed;
constexpr R2T2GuiMessage_AGC R2T2GuiMessage::slow;
constexpr R2T2GuiMessage_AGC R2T2GuiMessage::mid;
constexpr R2T2GuiMessage_AGC R2T2GuiMessage::fast;
constexpr R2T2GuiMessage_AGC R2T2GuiMessage::veryfast;
constexpr R2T2GuiMessage_AGC R2T2GuiMessage::AGC_MIN;
constexpr R2T2GuiMessage_AGC R2T2GuiMessage::AGC_MAX;
constexpr int R2T2GuiMessage::AGC_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* R2T2GuiMessageAnswer_Command_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_r2t2gui_2eproto);
  return file_level_enum_descriptors_r2t2gui_2eproto[3];
}
bool R2T2GuiMessageAnswer_Command_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr R2T2GuiMessageAnswer_Command R2T2GuiMessageAnswer::NONE;
constexpr R2T2GuiMessageAnswer_Command R2T2GuiMessageAnswer::Command_MIN;
constexpr R2T2GuiMessageAnswer_Command R2T2GuiMessageAnswer::Command_MAX;
constexpr int R2T2GuiMessageAnswer::Command_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void R2T2GuiMessage::InitAsDefaultInstance() {
}
class R2T2GuiMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<R2T2GuiMessage>()._has_bits_);
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_txdata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rxfreq(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_txfreq(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fftrate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_fftsize(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_gain(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_antenna(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_agc(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_filterlo(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_filterhi(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_notch(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_noise(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

R2T2GuiMessage::R2T2GuiMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:R2T2GuiProto.R2T2GuiMessage)
}
R2T2GuiMessage::R2T2GuiMessage(const R2T2GuiMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_txdata()) {
    txdata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.txdata_);
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_version()) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  ::memcpy(&rxfreq_, &from.rxfreq_,
    static_cast<size_t>(reinterpret_cast<char*>(&noise_) -
    reinterpret_cast<char*>(&rxfreq_)) + sizeof(noise_));
  // @@protoc_insertion_point(copy_constructor:R2T2GuiProto.R2T2GuiMessage)
}

void R2T2GuiMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_R2T2GuiMessage_r2t2gui_2eproto.base);
  txdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rxfreq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&noise_) -
      reinterpret_cast<char*>(&rxfreq_)) + sizeof(noise_));
}

R2T2GuiMessage::~R2T2GuiMessage() {
  // @@protoc_insertion_point(destructor:R2T2GuiProto.R2T2GuiMessage)
  SharedDtor();
}

void R2T2GuiMessage::SharedDtor() {
  txdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void R2T2GuiMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const R2T2GuiMessage& R2T2GuiMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_R2T2GuiMessage_r2t2gui_2eproto.base);
  return *internal_default_instance();
}


void R2T2GuiMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:R2T2GuiProto.R2T2GuiMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      txdata_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      version_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&rxfreq_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mode_) -
        reinterpret_cast<char*>(&rxfreq_)) + sizeof(mode_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&gain_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&noise_) -
        reinterpret_cast<char*>(&gain_)) + sizeof(noise_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* R2T2GuiMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .R2T2GuiProto.R2T2GuiMessage.Command command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::R2T2GuiProto::R2T2GuiMessage_Command_IsValid(val))) {
            _internal_set_command(static_cast<::R2T2GuiProto::R2T2GuiMessage_Command>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bytes txData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_txdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 rxFreq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_rxfreq(&has_bits);
          rxfreq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 txFreq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_txfreq(&has_bits);
          txfreq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fftRate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_fftrate(&has_bits);
          fftrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fftSize = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_fftsize(&has_bits);
          fftsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .R2T2GuiProto.R2T2GuiMessage.Mode mode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::R2T2GuiProto::R2T2GuiMessage_Mode_IsValid(val))) {
            _internal_set_mode(static_cast<::R2T2GuiProto::R2T2GuiMessage_Mode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 gain = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_gain(&has_bits);
          gain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 antenna = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_antenna(&has_bits);
          antenna_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .R2T2GuiProto.R2T2GuiMessage.AGC agc = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::R2T2GuiProto::R2T2GuiMessage_AGC_IsValid(val))) {
            _internal_set_agc(static_cast<::R2T2GuiProto::R2T2GuiMessage_AGC>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 filterLo = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_filterlo(&has_bits);
          filterlo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 filterHi = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_filterhi(&has_bits);
          filterhi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string version = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "R2T2GuiProto.R2T2GuiMessage.version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 notch = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_notch(&has_bits);
          notch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 noise = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_noise(&has_bits);
          noise_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* R2T2GuiMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:R2T2GuiProto.R2T2GuiMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .R2T2GuiProto.R2T2GuiMessage.Command command = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_command(), target);
  }

  // optional bytes txData = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_txdata(), target);
  }

  // optional uint64 rxFreq = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_rxfreq(), target);
  }

  // optional uint64 txFreq = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_txfreq(), target);
  }

  // optional uint32 fftRate = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_fftrate(), target);
  }

  // optional uint32 fftSize = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_fftsize(), target);
  }

  // optional .R2T2GuiProto.R2T2GuiMessage.Mode mode = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_mode(), target);
  }

  // optional int32 gain = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_gain(), target);
  }

  // optional uint32 antenna = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_antenna(), target);
  }

  // optional .R2T2GuiProto.R2T2GuiMessage.AGC agc = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_agc(), target);
  }

  // optional int32 filterLo = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_filterlo(), target);
  }

  // optional int32 filterHi = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_filterhi(), target);
  }

  // optional string version = 13;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "R2T2GuiProto.R2T2GuiMessage.version");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_version(), target);
  }

  // optional int32 notch = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_notch(), target);
  }

  // optional int32 noise = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_noise(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:R2T2GuiProto.R2T2GuiMessage)
  return target;
}

size_t R2T2GuiMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:R2T2GuiProto.R2T2GuiMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes txData = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_txdata());
    }

    // optional string version = 13;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional uint64 rxFreq = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_rxfreq());
    }

    // optional .R2T2GuiProto.R2T2GuiMessage.Command command = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_command());
    }

    // optional uint32 fftRate = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fftrate());
    }

    // optional uint64 txFreq = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_txfreq());
    }

    // optional uint32 fftSize = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fftsize());
    }

    // optional .R2T2GuiProto.R2T2GuiMessage.Mode mode = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional int32 gain = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_gain());
    }

    // optional uint32 antenna = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_antenna());
    }

    // optional .R2T2GuiProto.R2T2GuiMessage.AGC agc = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_agc());
    }

    // optional int32 filterLo = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_filterlo());
    }

    // optional int32 filterHi = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_filterhi());
    }

    // optional int32 notch = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_notch());
    }

    // optional int32 noise = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_noise());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void R2T2GuiMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:R2T2GuiProto.R2T2GuiMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const R2T2GuiMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<R2T2GuiMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:R2T2GuiProto.R2T2GuiMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:R2T2GuiProto.R2T2GuiMessage)
    MergeFrom(*source);
  }
}

void R2T2GuiMessage::MergeFrom(const R2T2GuiMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:R2T2GuiProto.R2T2GuiMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      txdata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.txdata_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (cached_has_bits & 0x00000004u) {
      rxfreq_ = from.rxfreq_;
    }
    if (cached_has_bits & 0x00000008u) {
      command_ = from.command_;
    }
    if (cached_has_bits & 0x00000010u) {
      fftrate_ = from.fftrate_;
    }
    if (cached_has_bits & 0x00000020u) {
      txfreq_ = from.txfreq_;
    }
    if (cached_has_bits & 0x00000040u) {
      fftsize_ = from.fftsize_;
    }
    if (cached_has_bits & 0x00000080u) {
      mode_ = from.mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      gain_ = from.gain_;
    }
    if (cached_has_bits & 0x00000200u) {
      antenna_ = from.antenna_;
    }
    if (cached_has_bits & 0x00000400u) {
      agc_ = from.agc_;
    }
    if (cached_has_bits & 0x00000800u) {
      filterlo_ = from.filterlo_;
    }
    if (cached_has_bits & 0x00001000u) {
      filterhi_ = from.filterhi_;
    }
    if (cached_has_bits & 0x00002000u) {
      notch_ = from.notch_;
    }
    if (cached_has_bits & 0x00004000u) {
      noise_ = from.noise_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void R2T2GuiMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:R2T2GuiProto.R2T2GuiMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void R2T2GuiMessage::CopyFrom(const R2T2GuiMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:R2T2GuiProto.R2T2GuiMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool R2T2GuiMessage::IsInitialized() const {
  return true;
}

void R2T2GuiMessage::InternalSwap(R2T2GuiMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  txdata_.Swap(&other->txdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rxfreq_, other->rxfreq_);
  swap(command_, other->command_);
  swap(fftrate_, other->fftrate_);
  swap(txfreq_, other->txfreq_);
  swap(fftsize_, other->fftsize_);
  swap(mode_, other->mode_);
  swap(gain_, other->gain_);
  swap(antenna_, other->antenna_);
  swap(agc_, other->agc_);
  swap(filterlo_, other->filterlo_);
  swap(filterhi_, other->filterhi_);
  swap(notch_, other->notch_);
  swap(noise_, other->noise_);
}

::PROTOBUF_NAMESPACE_ID::Metadata R2T2GuiMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void R2T2GuiMessageAnswer::InitAsDefaultInstance() {
}
class R2T2GuiMessageAnswer::_Internal {
 public:
  using HasBits = decltype(std::declval<R2T2GuiMessageAnswer>()._has_bits_);
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rxdata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fftdata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_txdataack(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rssi(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fftrate(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_gain(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

R2T2GuiMessageAnswer::R2T2GuiMessageAnswer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:R2T2GuiProto.R2T2GuiMessageAnswer)
}
R2T2GuiMessageAnswer::R2T2GuiMessageAnswer(const R2T2GuiMessageAnswer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rxdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_rxdata()) {
    rxdata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rxdata_);
  }
  fftdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fftdata()) {
    fftdata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fftdata_);
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_version()) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  ::memcpy(&command_, &from.command_,
    static_cast<size_t>(reinterpret_cast<char*>(&gain_) -
    reinterpret_cast<char*>(&command_)) + sizeof(gain_));
  // @@protoc_insertion_point(copy_constructor:R2T2GuiProto.R2T2GuiMessageAnswer)
}

void R2T2GuiMessageAnswer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_R2T2GuiMessageAnswer_r2t2gui_2eproto.base);
  rxdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fftdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&command_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gain_) -
      reinterpret_cast<char*>(&command_)) + sizeof(gain_));
}

R2T2GuiMessageAnswer::~R2T2GuiMessageAnswer() {
  // @@protoc_insertion_point(destructor:R2T2GuiProto.R2T2GuiMessageAnswer)
  SharedDtor();
}

void R2T2GuiMessageAnswer::SharedDtor() {
  rxdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fftdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void R2T2GuiMessageAnswer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const R2T2GuiMessageAnswer& R2T2GuiMessageAnswer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_R2T2GuiMessageAnswer_r2t2gui_2eproto.base);
  return *internal_default_instance();
}


void R2T2GuiMessageAnswer::Clear() {
// @@protoc_insertion_point(message_clear_start:R2T2GuiProto.R2T2GuiMessageAnswer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      rxdata_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      fftdata_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      version_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&command_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gain_) -
        reinterpret_cast<char*>(&command_)) + sizeof(gain_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* R2T2GuiMessageAnswer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .R2T2GuiProto.R2T2GuiMessageAnswer.Command command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::R2T2GuiProto::R2T2GuiMessageAnswer_Command_IsValid(val))) {
            _internal_set_command(static_cast<::R2T2GuiProto::R2T2GuiMessageAnswer_Command>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bytes rxData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_rxdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes fftData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_fftdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 txDataAck = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_txdataack(&has_bits);
          txdataack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double rssi = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_rssi(&has_bits);
          rssi_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "R2T2GuiProto.R2T2GuiMessageAnswer.version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fftRate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_fftrate(&has_bits);
          fftrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 gain = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_gain(&has_bits);
          gain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* R2T2GuiMessageAnswer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:R2T2GuiProto.R2T2GuiMessageAnswer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .R2T2GuiProto.R2T2GuiMessageAnswer.Command command = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_command(), target);
  }

  // optional bytes rxData = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_rxdata(), target);
  }

  // optional bytes fftData = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_fftdata(), target);
  }

  // optional uint32 txDataAck = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_txdataack(), target);
  }

  // optional double rssi = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_rssi(), target);
  }

  // optional string version = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "R2T2GuiProto.R2T2GuiMessageAnswer.version");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_version(), target);
  }

  // optional uint32 fftRate = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_fftrate(), target);
  }

  // optional int32 gain = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_gain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:R2T2GuiProto.R2T2GuiMessageAnswer)
  return target;
}

size_t R2T2GuiMessageAnswer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:R2T2GuiProto.R2T2GuiMessageAnswer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes rxData = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_rxdata());
    }

    // optional bytes fftData = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_fftdata());
    }

    // optional string version = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional .R2T2GuiProto.R2T2GuiMessageAnswer.Command command = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_command());
    }

    // optional uint32 txDataAck = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_txdataack());
    }

    // optional double rssi = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional uint32 fftRate = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fftrate());
    }

    // optional int32 gain = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_gain());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void R2T2GuiMessageAnswer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:R2T2GuiProto.R2T2GuiMessageAnswer)
  GOOGLE_DCHECK_NE(&from, this);
  const R2T2GuiMessageAnswer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<R2T2GuiMessageAnswer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:R2T2GuiProto.R2T2GuiMessageAnswer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:R2T2GuiProto.R2T2GuiMessageAnswer)
    MergeFrom(*source);
  }
}

void R2T2GuiMessageAnswer::MergeFrom(const R2T2GuiMessageAnswer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:R2T2GuiProto.R2T2GuiMessageAnswer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      rxdata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rxdata_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      fftdata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fftdata_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (cached_has_bits & 0x00000008u) {
      command_ = from.command_;
    }
    if (cached_has_bits & 0x00000010u) {
      txdataack_ = from.txdataack_;
    }
    if (cached_has_bits & 0x00000020u) {
      rssi_ = from.rssi_;
    }
    if (cached_has_bits & 0x00000040u) {
      fftrate_ = from.fftrate_;
    }
    if (cached_has_bits & 0x00000080u) {
      gain_ = from.gain_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void R2T2GuiMessageAnswer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:R2T2GuiProto.R2T2GuiMessageAnswer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void R2T2GuiMessageAnswer::CopyFrom(const R2T2GuiMessageAnswer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:R2T2GuiProto.R2T2GuiMessageAnswer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool R2T2GuiMessageAnswer::IsInitialized() const {
  return true;
}

void R2T2GuiMessageAnswer::InternalSwap(R2T2GuiMessageAnswer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rxdata_.Swap(&other->rxdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fftdata_.Swap(&other->fftdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(command_, other->command_);
  swap(txdataack_, other->txdataack_);
  swap(rssi_, other->rssi_);
  swap(fftrate_, other->fftrate_);
  swap(gain_, other->gain_);
}

::PROTOBUF_NAMESPACE_ID::Metadata R2T2GuiMessageAnswer::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace R2T2GuiProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::R2T2GuiProto::R2T2GuiMessage* Arena::CreateMaybeMessage< ::R2T2GuiProto::R2T2GuiMessage >(Arena* arena) {
  return Arena::CreateInternal< ::R2T2GuiProto::R2T2GuiMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::R2T2GuiProto::R2T2GuiMessageAnswer* Arena::CreateMaybeMessage< ::R2T2GuiProto::R2T2GuiMessageAnswer >(Arena* arena) {
  return Arena::CreateInternal< ::R2T2GuiProto::R2T2GuiMessageAnswer >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
